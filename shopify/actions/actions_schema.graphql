## Product property names like "Size", "Color", and "Material" that the customers can select.
type ProductOption {
  name: String!
  values: [String]
}

type Money {
  ## Decimal money amount.
  amount: Currency
  ## Currency of the money.
  currencyCode: String
}

## A collection of monetary values in their respective currencies.
## Typically used in the context of multi-currency pricing and transactions,
## when an amount in the shop's currency is converted to the customer's currency of choice.
type MoneySet {
  ## Amount in shop currency.
  shopMoney: Money

  ## Amount in presentment currency.
  presentmentMoney: Money
}

## A product variant represents a different version of a product, such as differing sizes or differing colors.
type Variant {
  id: ID!
  title: String
  productId: String
  createdAt: DateTime
  price: Currency
  sku: String
  updatedAt: DateTime
  inventoryQuantity: Int
}

enum ProductStatus {
  ## The product is ready to sell and can be published to sales channels and apps. Products with an active status aren't automatically published to sales channels, such as the online store, or apps. By default, existing products are set to active.
  ACTIVE
  ## [value-archived](https://shopify.dev/docs/api/admin-graphql/2024-10/enums/ProductStatus#value-archived)
  ## The product is no longer being sold and isn't available to customers on sales channels and apps.
  ARCHIVED
  ## [value-draft](https://shopify.dev/docs/api/admin-graphql/2024-10/enums/ProductStatus#value-draft)
  ## The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.
  DRAFT
}

## A product represents an individual item for sale in a Shopify store
type Product {
  id: ID!
  title: String
  status: ProductStatus
  createdAt: DateTime
  productType: String
  vendor: String
  updatedAt: DateTime
  tags: String
  variants: [Variant!]
  options: [ProductOption]
}

## Represents a single line in an order. There is one line item for each distinct product variant.
type LineItem {
  id: ID!
  name: String
  price: Money
  product: Product
  quantity: Int
  sku: String
  giftCard: Boolean
  totalDiscount: String
  variantId: Int
  variantTitle: String
  vendor: String
}

## Represents a shipping line for a Shop Pay payment request.
type ShippingLine {
  ## A reference to the carrier service that provided the rate. Present when the rate was computed by a third-party carrier service.
  carrierIdentifier: String
  ## A reference to the shipping method.
  code: String
  ## Whether the shipping line is custom or not.
  custom: Boolean!
  ## A globally-unique ID.
  id: ID!
  ## The phone number at the shipping address.
  phone: String
  ## Returns the rate source for the shipping line.
  source: String
  ## Returns the title of the shipping line.
  title: String!
}

type ParentTransaction {
  id: ID!
}

enum OrderTransactionKind {
  ## An amount reserved against the cardholder's funding source. Money does not change hands until the authorization is captured.
  AUTHORIZATION
  ## A transfer of the money that was reserved by an authorization.
  CAPTURE
  ## The money returned to the customer when they've paid too much during a cash transaction.
  CHANGE
  ## An authorization for a payment taken with an EMV credit card reader.
  EMV_AUTHORIZATION
  ## A partial or full return of captured funds to the cardholder. A refund can happen only after a capture is processed.
  REFUND
  ## An authorization and capture performed together in a single step.
  SALE
  ## A suggested refund transaction that can be used to create a refund.
  SUGGESTED_REFUND
  ## A cancelation of an authorization transaction.
  VOID
}

## A standardized error code, independent of the payment provider.
enum OrderTransactionErrorCode {
  ## The payment method was invalid.
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD

  ## The maximum amount has been captured.
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED

  ## The maximum amount has been refunded.
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED

  ## The maximum of 10 authorizations has been captured for an order.
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED

  ## The maximum of 10 refunds has been processed for an order.
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED

  ## The order was canceled, which canceled all open authorizations.
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED

  ## The order was not confirmed within three hours.
  AMAZON_PAYMENTS_STALE

  ## Call the card issuer.
  CALL_ISSUER

  ## The card was declined.
  CARD_DECLINED

  ## There is an error in the gateway or merchant configuration.
  CONFIG_ERROR

  ## The card is expired.
  EXPIRED_CARD

  ## There was an unknown error with processing the payment.
  GENERIC_ERROR

  ## The address does not match the card number.
  INCORRECT_ADDRESS

  ## The CVC does not match the card number.
  INCORRECT_CVC

  ## The card number is incorrect.
  INCORRECT_NUMBER

  ## The entered PIN is incorrect.
  INCORRECT_PIN

  ## The ZIP or postal code does not match the card number.
  INCORRECT_ZIP

  ## The amount is either too high or too low for the provider.
  INVALID_AMOUNT

  ## The payment method is not available in the customer's country.
  INVALID_COUNTRY

  ## The format of the CVC is incorrect.
  INVALID_CVC

  ## The format of the expiry date is incorrect.
  INVALID_EXPIRY_DATE

  ## The format of the card number is incorrect.
  INVALID_NUMBER

  ## The payment method is momentarily unavailable.
  PAYMENT_METHOD_UNAVAILABLE

  ## The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.
  PICK_UP_CARD

  ## There was an error while processing the payment.
  PROCESSING_ERROR

  ## A real card was used but the gateway was in test mode.
  TEST_MODE_LIVE_CARD

  ## The gateway or merchant configuration doesn't support a feature, such as network tokenization.
  UNSUPPORTED_FEATURE
}

## he different states that an OrderTransaction can have.
enum OrderTransactionStatus {
  ## Awaiting a response.
  AWAITING_RESPONSE

  ## There was an error while processing the transaction.
  ERROR

  ## The transaction failed.
  FAILURE

  ## The transaction is pending.
  PENDING

  ## The transaction succeeded.
  SUCCESS

  ## The transaction status is unknown.
  UNKNOWN
}

type ParentTransaction {
  id: ID!
}

## transaction associated with the order.
type OrderTransaction {
  ## A globally-unique ID.
  id: ID!
  ## he amount and currency of the transaction in shop and presentment currencies.
  amountSet: MoneySet
  createdAt: DateTime
  kind: OrderTransactionKind
  status: OrderTransactionStatus
  gateway: String
  parentTransaction: ParentTransaction
  ## A standardized error code, independent of the payment provider.
  errorCode: OrderTransactionErrorCode
}

## The financial status of the order that can be shown to the merchant.
enum OrderDisplayFinancialStatus {
  AUTHORIZED
  EXPIRED
  PAID
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  PENDING
  REFUNDED
  VOIDED
}

## Represents the order's aggregated fulfillment status for display purposes.
enum OrderDisplayFulfillmentStatus {
  FULFILLED
  IN_PROGRESS
  ON_HOLD
  OPEN
  PARTIALLY_FULFILLED
  PENDING_FULFILLMENT
  REQUEST_DECLINED
  RESTOCKED
  SCHEDULED
  UNFULFILLED
}

## The reason provided when the order was canceled.
enum ShopifyOrderCancelReason {
  CUSTOMER
  DECLINED
  FRAUD
  INVENTORY
  OTHER
  STAFF
}

## Represents the tracking information for a fulfillment.
type FulfillmentTrackingInfo {
  ## The name of the tracking company. (Shipping Carriers help page)[https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers?shpxid=de34ac44-9F69-4CCB-9F6D-466867094432#integrated-shipping-carriers]
  company: String!
  ## The tracking number of the fulfillment.
  number: String!
  ## The URLs to track the fulfillment.
  url: String!
}

enum FulfillmentDisplayStatus {
  ##Displayed as Attempted delivery.
  ATTEMPTED_DELIVERY

  ## Displayed as Canceled.
  CANCELED

  ## Displayed as Confirmed.
  CONFIRMED

  ## Displayed as Delayed.
  DELAYED

  ## Displayed as Delivered.
  DELIVERED

  ## Displayed as Failure.
  FAILURE

  ## Displayed as Fulfilled.
  FULFILLED

  ## Displayed as In transit.
  IN_TRANSIT

  ## Displayed as Label printed.
  LABEL_PRINTED

  ## Displayed as Label purchased.
  LABEL_PURCHASED

  ## Displayed as Label voided.
  LABEL_VOIDED

  ## Displayed as Marked as fulfilled.
  MARKED_AS_FULFILLED

  ## Displayed as Not delivered.
  NOT_DELIVERED

  ## Displayed as Out for delivery.
  OUT_FOR_DELIVERY

  ## Displayed as Picked up.
  PICKED_UP

  ## Displayed as Ready for pickup.
  READY_FOR_PICKUP

  ## Displayed as Submitted.
  SUBMITTED
}

enum FulfillmentStatus {
  ## The fulfillment was canceled.
  CANCELLED
  ## There was an error with the fulfillment request.
  ERROR
  ## The fulfillment request failed.
  FAILURE
  ## The fulfillment was completed successfully.
  SUCCESS
  ## The third-party fulfillment service has acknowledged the fulfillment and is processing it.
  OPEN
  ## Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to open or success.
  PENDING
}

## Represents a line item from an order that's included in a fulfillment.
type FulfillmentLineItem {
  ## Number of line items in the fulfillment.
  quantity: Int
  ## The total price before discounts are applied in shop and presentment currencies.
  originalTotal: MoneySet
  ## The total price after discounts are applied in shop and presentment currencies.
  discountedTotalSet: MoneySet
  ## The associated order's line item id.
  lineItem: LineItem!
}

type FulfillmentOriginAddress {
  address1: String
  address2: String
  city: String
  countryCode: String!
  provinceCode: String
  zip: String
}

type Fulfillment {
  ## A globally-unique ID.
  id: ID!
  ## The date and time when the fulfillment was created.
  createdAt: DateTime!
  ## The date and time when the fulfillment was last modified.
  updatedAt: DateTime!
  ## The date that this fulfillment was delivered.
  deliveredAt: DateTime

  ## The status of the fulfillment.
  displayStatus: FulfillmentDisplayStatus
  ## The status of the fulfillment.
  status: FulfillmentStatus!

  ## The estimated date that this fulfillment will arrive.
  estimatedDeliveryAt: DateTime
  ## The date and time when the fulfillment went into transit.
  inTransitAt: DateTime
  ## Human readable reference identifier for this fulfillment.
  name: String!
  ## The address at which the fulfillment occurred.
  originAddress: FulfillmentOriginAddress

  ## Whether any of the line items in the fulfillment require shipping.
  requiresShipping: Boolean

  ## Tracking information associated with the fulfillment, such as the tracking company, tracking number, and tracking URL.
  trackingInfo: [FulfillmentTrackingInfo!]!

  fulfillmentLineItems: [FulfillmentLineItem!]!
}

type MailingAddress {
  address1: String
  address2: String
  city: String
  company: String
  country: String
  countryCodeV2: String
  firstName: String
  lastName: String
  name: String
  phone: String
  province: String
  provinceCode: String
  zip: String
}

type CustomerInfo {
  id: ID!
  displayName: String
}

## An order from Shopify
type Order {
  id: ID!
  confirmationNumber: String
  customer: CustomerInfo
  ## Whether there are line items that can be fulfilled. This field returns false when the order has no fulfillable line items.
  fulfillable: Boolean!
  ## The count of fulfillments including the cancelled fulfillments.
  fulfillmentsCount: Int
  ## List of shipments for the order.
  fulfillments: [Fulfillment]
  name: String!
  orderNumber: String!
  email: String
  currentSubtotalPriceSet: MoneySet
  currentTotalDiscountsSet: MoneySet
  currentTotalTaxSet: MoneySet
  currentTotalPriceSet: MoneySet
  cancelReason: ShopifyOrderCancelReason
  note: String
  tags: [String]
  createdAt: DateTime
  updatedAt: DateTime
  financialStatus: OrderDisplayFinancialStatus
  fulfillmentStatus: OrderDisplayFulfillmentStatus
  billingAddress: MailingAddress
  shippingAddress: MailingAddress
  ## Represents the shipping details that the customer chose for their order.
  shippingLines: [ShippingLine]
  orderStatusUrl: String
  lineItems: [LineItem]
  ## A list of transactions associated with the order.
  transactions: [OrderTransaction]
}

type ShopifyError {
  message: String!
  code: String
}

## The result of looking up a single order
type OrderResult {
  order: Order
  ## error message if the order is not found or there is an error
  errors: [ShopifyError]
}

## the result of looking up an orders by email
type OrdersResult {
  orders: [Order!]
  errors: [ShopifyError]
}

## The type of restock for the refunded line item.
enum RefundLineItemRestockType {
  ## The refund line item was canceled. Use this when restocking unfulfilled line items.
  CANCEL
  ## Deprecated. The refund line item was restocked, without specifically being identified as a return or cancelation. This value is not accepted when creating new refunds.
  LEGACY_RESTOCK
  ## Refund line item was not restocked.
  NO_RESTOCK
  ## The refund line item was returned. Use this when restocking line items that were fulfilled.
  RETURN
}

type RefundLineItem {
  id: ID
  quantity: Int!
  restockType: RefundLineItemRestockType!
  lineItem: LineItem!
  priceSet: MoneySet!
  restocked: Boolean!
  subtotalSet: MoneySet!
  totalTaxSet: MoneySet!
}

type RefundResult {
  id: ID!
  createdAt: DateTime!
  note: String
  transactions: [OrderTransaction!]!
  refundLineItems: [RefundLineItem!]
}

## Whether to send a notification to the customer about the order cancellation.
enum CancelOrderReason {
  """
  The customer wanted to cancel the order.
  """
  CUSTOMER
  """
  Payment was declined.
  """
  DECLINED
  """
  The order was fraudulent.
  """
  FRAUD
  """
  There was insufficient inventory.
  """
  INVENTORY
  """
  The order was canceled for an unlisted reason.
  """
  OTHER
  """
  Staff made an error.
  """
  STAFF
}

type UserError {
  message: String!
  field: String
}

enum OrderCancelUserErrorCode {
  ## The input value is invalid.
  INVALID
  ## The record with the ID used as the input value couldn't be found.
  NOT_FOUND
  ## An order refund was requested but the user does not have the refund_orders permission.
  NO_REFUND_PERMISSION
}

type OrderCancelUserError {
  message: String!
  code: OrderCancelUserErrorCode!
  field: String
}

type CancelOrderResult {
  ## The ID of the job, used to track the status of internal operations.
  jobId: ID
  ## Indicates whether the job has been completed.
  done: Boolean
  errors: [ShopifyError]
  userErrors: [OrderCancelUserError]
}

type RefundLineItemResult {
  id: ID
  createdAt: DateTime
  note: String
  transactions: [OrderTransaction!]
  refundLineItems: [RefundLineItem!]
  errors: [ShopifyError]
  userErrors: [UserError]
}

## The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
type OrderRefund {
  id: ID!
  note: String
  totalRefundedSet: MoneySet
}

type OrderCancelInformation {
  name: String!
  cancelledAt: DateTime
  cancelReason: ShopifyOrderCancelReason
  refunds: [OrderRefund]
}

## Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes. (i.e. order cancellation)
type JobStatus {
  ## The ID of the job, used to track the status of internal operations.
  id: ID
  ## Indicates whether the job has been completed.
  done: Boolean
  order: OrderCancelInformation
  errors: [ShopifyError]
  userErrors: [UserError]
}

## A suggested transaction. Suggested transaction are usually used in the context of refunds and exchanges.
## https://shopify.dev/docs/api/admin-graphql/2024-10/objects/SuggestedOrderTransaction
type SuggestedOrderTransaction {
  ## The masked account number associated with the payment method.
  accountNumber: String
  ## The amount of the suggested order transaction in shop.
  amountSet: MoneySet
  ## The human-readable payment gateway name suggested to process the transaction.
  formattedGateway: String
  ## The suggested payment gateway used to process the transaction.
  gateway: String
  ## Specifies the kind of the suggested order transaction.
  kind: OrderTransactionKind!
  ## Specifies the available amount to refund on the gateway in shop currencies. Only available within SuggestedRefund.
  maximumRefundableSet: MoneySet
  ## The associated parent transaction ID, for example the authorization of a capture.
  parentTransaction: ParentTransaction
}

## Represents the shipping costs refunded on the Refund.
## https://shopify.dev/docs/api/admin-graphql/2024-10/objects/ShippingRefund
type ShippingRefund {
  ## The monetary value of the shipping fees to be refunded.
  amountSet: MoneySet!
  ## The maximum amount of shipping fees currently refundable.
  maximumRefundableSet: MoneySet!
  ## The monetary value of the tax allocated to shipping fees to be refunded.
  taxSet: MoneySet!
}

## The duty details for a line item.
type Duty {
  ## The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
  countryCodeOfOrigin: String
  ## The harmonized system code of the item used in calculating the duty.
  harmonizedSystemCode: String
  ## A globally-unique ID.
  id: ID!
  ## The amount of the duty.
  price: MoneySet!
}

## Represents a refunded duty.
## https://shopify.dev/docs/api/admin-graphql/2024-10/objects/RefundDuty
type RefundDuty {
  ## The amount of a refunded duty in shop currencies.
  amountSet: MoneySet!
  ## The duty associated with this refunded duty.
  originalDuty: Duty
}

## Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
## https://shopify.dev/docs/api/admin-graphql/2024-10/objects/SuggestedRefund
type SuggestedRefund {
  ## The total monetary value to be refunded in shop currencies.
  amountSet: MoneySet!
  ## The sum of all the discounted prices of the line items being refunded.
  discountedSubtotalSet: MoneySet!
  ## The total monetary value available to refund in shop currencies.
  maximumRefundableSet: MoneySet!
  ## The sum of all the prices of the line items being refunded in shop currencies.
  subtotalSet: MoneySet!
  ## The total cart discount amount that was applied to all line items in this refund.
  totalCartDiscountAmountSet: MoneySet!
  ## The sum of all the duties being refunded from the order in shop currencies. The value must be positive.
  totalDutiesSet: MoneySet!
  ## The sum of the taxes being refunded from the order in shop currencies. The value must be positive.
  totalTaxSet: MoneySet!
  ## suggested order transaction.
  suggestedTransactions: SuggestedOrderTransaction!
  ## The shipping costs to be refunded from the order.
  shipping: ShippingRefund!
  ## A list of line items to be refunded, along with restock instructions.
  refundLineItems: [RefundLineItem!]!
  ## A list of duties to be refunded from the order.
  refundDuties: [RefundDuty!]!
}

type SuggestedRefundResult {
  errors: [ShopifyError]
  suggestedRefund: SuggestedRefund
}

type UpdateShippingAddressResult {
  order: Order
  errors: [ShopifyError]
  userErrors: [UserError]
}

type UserError {
  message: String!
  field: [String!]
}

type Query {
  lookupOrderByOrderNum(
    "The unique identifier for the order that appears on the order page in the Shopify admin and the Order status page. For example, " #1001", "EN1001", or "1001-A". This value isn't unique across multiple stores."
    orderNum: String!
  ): OrderResult @action(name: "look_up_order_by_order_num")

  lookupOrdersByEmail(email: String!): OrdersResult @action(name: "look_up_orders_by_email")

  jobStatus("The ID of the job." jobId: ID!, "The order ID related the job." orderId: ID!): JobStatus @action(name: "job_status")

  suggestedRefund(orderId: ID!, lineItemId: ID!, quantity: Int): SuggestedRefundResult @action(name: "suggested_refund")
}

type Mutation {
  """
  Mutation to cancel an order with options for refund, restocking, and customer notification.
  This is an asynchronous task and will return a jobId to track the status of the operation.
  """
  cancelOrder(
    "The ID of the order to be canceled."
    orderId: ID!

    "The reason for canceling the order."
    reason: CancelOrderReason!

    "Whether to refund the amount paid by the customer."
    refund: Boolean!

    "Whether to restock the inventory committed to the order. For unpaid orders fulfilled from locations that have been deactivated, inventory will not be restocked to the deactivated locations even if this argument is set to true."
    restock: Boolean!

    "A staff-facing note about the order cancellation. This is not visible to the customer. default: null"
    staffNote: String

    "Whether to notify the customer about the action being performed, such as order cancellation or refund."
    notifyCustomer: Boolean
  ): CancelOrderResult @action(name: "cancel_order")

  refundLineItem(notify: Boolean, note: String, orderId: ID!, lineItemId: ID!, quantity: Int!, transactionAmount: Currency!, transactionGateway: String!, transactionKind: OrderTransactionKind!, transactionParentId: ID): RefundLineItemResult @action(name: "refund_line_item")

  updateShippingAddress(orderId: ID!, address1: String, address2: String, city: String, country_code: String, country: String, email: String, phone: String, province_code: String, province: String, state: String, zip: String): UpdateShippingAddressResult @action(name: "update_shipping_address")
}
