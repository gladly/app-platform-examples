## Represents the address of a location. used for billing and shipping addresses.
type MailingAddress {
  address1: String
  address2: String
  city: String
  company: String
  country: String
  countryCodeV2: String
  firstName: String
  lastName: String
  name: String
  phone: String
  province: String
  provinceCode: String
  zip: String
}

type FulfillmentOriginAddress {
  address1: String
  address2: String
  city: String
  countryCode: String!
  provinceCode: String
  zip: String
}

type Money {
  amount: Currency
  currencyCode: String
}

type MoneySet {
  shop: Money
}

enum FulfillmentStatus {
  ## The fulfillment was canceled.
  CANCELLED
  ## There was an error with the fulfillment request.
  ERROR
  ## The fulfillment request failed.
  FAILURE
  ## The fulfillment was completed successfully.
  SUCCESS
  ## The third-party fulfillment service has acknowledged the fulfillment and is processing it.
  OPEN
  ## Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to open or success.
  PENDING
}

type LineItemOnlyId {
  id: ID!
}

## Represents a line item from an order that's included in a fulfillment.
type FulfillmentLineItem {
  ## Number of line items in the fulfillment.
  quantity: Int
  ## The total price before discounts are applied in shop and presentment currencies.
  originalTotal: MoneySet
  ## The total price after discounts are applied in shop and presentment currencies.
  discountedTotalSet: MoneySet
  ## The associated order's line item id.
  lineItem: LineItemOnlyId!
}

enum FulfillmentDisplayStatus {
  ##Displayed as Attempted delivery.
  ATTEMPTED_DELIVERY

  ## Displayed as Canceled.
  CANCELED

  ## Displayed as Confirmed.
  CONFIRMED

  ## Displayed as Delayed.
  DELAYED

  ## Displayed as Delivered.
  DELIVERED

  ## Displayed as Failure.
  FAILURE

  ## Displayed as Fulfilled.
  FULFILLED

  ## Displayed as In transit.
  IN_TRANSIT

  ## Displayed as Label printed.
  LABEL_PRINTED

  ## Displayed as Label purchased.
  LABEL_PURCHASED

  ## Displayed as Label voided.
  LABEL_VOIDED

  ## Displayed as Marked as fulfilled.
  MARKED_AS_FULFILLED

  ## Displayed as Not delivered.
  NOT_DELIVERED

  ## Displayed as Out for delivery.
  OUT_FOR_DELIVERY

  ## Displayed as Picked up.
  PICKED_UP

  ## Displayed as Ready for pickup.
  READY_FOR_PICKUP

  ## Displayed as Submitted.
  SUBMITTED
}

## Represents the tracking information for a fulfillment.
type FulfillmentTrackingInfo {
  ## The name of the tracking company. (Shipping Carriers help page)[https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers?shpxid=de34ac44-9F69-4CCB-9F6D-466867094432#integrated-shipping-carriers]
  company: String!
  ## The tracking number of the fulfillment.
  number: String!
  ## The URLs to track the fulfillment.
  url: String!
}

type Fulfillment {
  ## A globally-unique ID.
  id: ID!
  ## The date and time when the fulfillment was created.
  createdAt: DateTime!
  ## The date and time when the fulfillment was last modified.
  updatedAt: DateTime!
  ## The date that this fulfillment was delivered.
  deliveredAt: DateTime

  ## The status of the fulfillment.
  displayStatus: FulfillmentDisplayStatus
  ## The status of the fulfillment.
  status: FulfillmentStatus!

  ## The estimated date that this fulfillment will arrive.
  estimatedDeliveryAt: DateTime
  ## The date and time when the fulfillment went into transit.
  inTransitAt: DateTime
  ## Human readable reference identifier for this fulfillment.
  name: String!
  ## The address at which the fulfillment occurred.
  originAddress: FulfillmentOriginAddress

  ## Whether any of the line items in the fulfillment require shipping.
  requiresShipping: Boolean

  ## Tracking information associated with the fulfillment, such as the tracking company, tracking number, and tracking URL.
  trackingInfo: [FulfillmentTrackingInfo!]!

  fulfillmentLineItems: [FulfillmentLineItem!]!
}

## Product property names like "Size", "Color", and "Material" that the customers can select.
type ProductOption {
  name: String!
  values: [String]
}

## A product variant represents a different version of a product, such as differing sizes or differing colors.
type Variant {
  id: ID!
  title: String
  createdAt: DateTime
  price: Currency
  sku: String
  updatedAt: DateTime
  inventoryQuantity: Int
}

enum ProductStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

## A product represents an individual item for sale in a Shopify store
type Product {
  id: ID!
  title: String
  status: ProductStatus
  createdAt: DateTime
  productType: String
  vendor: String
  updatedAt: DateTime
  tags: String
  variants: [Variant!]
  options: [ProductOption]
}

## Represents a single line in an order. There is one line item for each distinct product variant.
type LineItem {
  id: ID!
  name: String
  price: Money
  product: Product
  quantity: Int
  sku: String
  giftCard: Boolean
  totalDiscount: String
  variantId: Int
  variantTitle: String
  vendor: String
}

## Represents a shipping line for a Shop Pay payment request.
type ShippingLine {
  source: String
}

## The financial status of the order that can be shown to the merchant.
enum OrderDisplayFinancialStatus {
  AUTHORIZED
  EXPIRED
  PAID
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  PENDING
  REFUNDED
  VOIDED
}

## Represents the order's aggregated fulfillment status for display purposes.
enum OrderDisplayFulfillmentStatus {
  FULFILLED
  IN_PROGRESS
  ON_HOLD
  OPEN
  PARTIALLY_FULFILLED
  PENDING_FULFILLMENT
  REQUEST_DECLINED
  RESTOCKED
  SCHEDULED
  UNFULFILLED
}

## The reason provided when the order was canceled.
enum ShopifyOrderCancelReason {
  CUSTOMER
  DECLINED
  FRAUD
  INVENTORY
  OTHER
  STAFF
}

## A standardized error code, independent of the payment provider.
enum OrderTransactionErrorCode {
  ## The payment method was invalid.
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD

  ## The maximum amount has been captured.
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED

  ## The maximum amount has been refunded.
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED

  ## The maximum of 10 authorizations has been captured for an order.
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED

  ## The maximum of 10 refunds has been processed for an order.
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED

  ## The order was canceled, which canceled all open authorizations.
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED

  ## The order was not confirmed within three hours.
  AMAZON_PAYMENTS_STALE

  ## Call the card issuer.
  CALL_ISSUER

  ## The card was declined.
  CARD_DECLINED

  ## There is an error in the gateway or merchant configuration.
  CONFIG_ERROR

  ## The card is expired.
  EXPIRED_CARD

  ## There was an unknown error with processing the payment.
  GENERIC_ERROR

  ## The address does not match the card number.
  INCORRECT_ADDRESS

  ## The CVC does not match the card number.
  INCORRECT_CVC

  ## The card number is incorrect.
  INCORRECT_NUMBER

  ## The entered PIN is incorrect.
  INCORRECT_PIN

  ## The ZIP or postal code does not match the card number.
  INCORRECT_ZIP

  ## The amount is either too high or too low for the provider.
  INVALID_AMOUNT

  ## The payment method is not available in the customer's country.
  INVALID_COUNTRY

  ## The format of the CVC is incorrect.
  INVALID_CVC

  ## The format of the expiry date is incorrect.
  INVALID_EXPIRY_DATE

  ## The format of the card number is incorrect.
  INVALID_NUMBER

  ## The payment method is momentarily unavailable.
  PAYMENT_METHOD_UNAVAILABLE

  ## The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.
  PICK_UP_CARD

  ## There was an error while processing the payment.
  PROCESSING_ERROR

  ## A real card was used but the gateway was in test mode.
  TEST_MODE_LIVE_CARD

  ## The gateway or merchant configuration doesn't support a feature, such as network tokenization.
  UNSUPPORTED_FEATURE
}

## he different states that an OrderTransaction can have.
enum OrderTransactionStatus {
  ## Awaiting a response.
  AWAITING_RESPONSE

  ## There was an error while processing the transaction.
  ERROR

  ## The transaction failed.
  FAILURE

  ## The transaction is pending.
  PENDING

  ## The transaction succeeded.
  SUCCESS

  ## The transaction status is unknown.
  UNKNOWN
}


enum OrderTransactionKind {
  ## An amount reserved against the cardholder's funding source. Money does not change hands until the authorization is captured.
  AUTHORIZATION
  ## A transfer of the money that was reserved by an authorization.
  CAPTURE
  ## The money returned to the customer when they've paid too much during a cash transaction.
  CHANGE
  ## An authorization for a payment taken with an EMV credit card reader.
  EMV_AUTHORIZATION
  ## A partial or full return of captured funds to the cardholder. A refund can happen only after a capture is processed.
  REFUND
  ## An authorization and capture performed together in a single step.
  SALE
  ## A suggested refund transaction that can be used to create a refund.
  SUGGESTED_REFUND
  ## A cancelation of an authorization transaction.
  VOID
}

type ParentTransaction {
  id: ID!
}

## transaction associated with the order.
type OrderTransaction {
  ## A globally-unique ID.
  id: ID!
  ## he amount and currency of the transaction in shop and presentment currencies.
  amountSet: MoneySet
  createdAt: DateTime
  kind: OrderTransactionKind
  status: OrderTransactionStatus
  gateway: String
  parentTransaction: ParentTransaction
  ## A standardized error code, independent of the payment provider.
  errorCode: OrderTransactionErrorCode
}

type CustomerInfo {
  id: ID!
  displayName: String
}

## An order from Shopify
type Order @dataType(name: "shopify_order", version: "3.0") {
  id: ID!
  confirmationNumber: String
  ## Whether there are line items that can be fulfilled. This field returns false when the order has no fulfillable line items.
  fulfillable: Boolean!
  ## The count of fulfillments including the cancelled fulfillments.
  fulfillmentsCount: Int
  ## List of shipments for the order.
  fulfillments: [Fulfillment]
  name: String!
  email: String
  
  customer: CustomerInfo
  customerId: ID!

  currentSubtotalPriceSet: MoneySet
  currentTotalDiscountsSet: MoneySet
  currentTotalTaxSet: MoneySet
  currentTotalPriceSet: MoneySet
  cancelReason: ShopifyOrderCancelReason
  note: String
  tags: [String]
  createdAt: DateTime
  updatedAt: DateTime
  financialStatus: OrderDisplayFinancialStatus
  fulfillmentStatus: OrderDisplayFulfillmentStatus
  billingAddress: MailingAddress
  shippingAddress: MailingAddress
  shippingLines: [ShippingLine]
  orderStatusUrl: String
  lineItems: [LineItem]
  ## A list of transactions associated with the order.
  transactions: [OrderTransaction]
}

## The current email marketing state for the customer
type SmsOrEmailMarketingConsent {
  marketingState: String
  marketingOptInLevel: String
  consentUpdatedAt: DateTime
}

type LastOrderId {
  id: ID!
}

## Returns a Customer resource.
type Customer @dataType(name: "shopify_customer", version: "3.0") {
  id: ID!
  email: String
  phone: String
  firstName: String
  lastName: String
  defaultAddress: MailingAddress
  ## The total amount that the customer has spent on orders in their lifetime.
  amountSpent: Money
  lastOrder: LastOrderId
  ## The current email marketing state for the customer. If the customer doesn't have an email address, then this property is null.
  emailMarketingConsent: SmsOrEmailMarketingConsent
  ## The current SMS marketing state for the customer's phone number.
  smsMarketingConsent: SmsOrEmailMarketingConsent
  lifetimeDuration: String!
  note: String
  numberOfOrders: Int!
  tags: [String]
  orders: [Order] @parentId(template: "{{.id}}")
  createdAt: DateTime
  updatedAt: DateTime
}

type Query {
  customer: Customer
}
